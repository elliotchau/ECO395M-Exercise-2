# Load Necessary Packages
library(Amelia)
library(caret)
install.packages("Amelia")
install.packages("nnet")
install.packages("nnet")
install.packages("pander")
# Load Necessary Packages
library(Amelia)
library(caret)
library(nnet)
library(dplyr)
library(pander)
library(ggplot2)
library(ggthemes)
# Load Necessary Packages
library(Amelia)
library(caret)
library(nnet)
library(dplyr)
library(pander)
library(ggplot2)
library(ggthemes)
brca <- read.csv("https://raw.githubusercontent.com/jgscott/ECO395M/master/data/brca.csv")
pander(summary(brca))
str(brca)
# Check for missing data
sapply(brca, function(x) sim(is.na(x)))
# Load Necessary Packages
library(Amelia)
library(caret)
library(nnet)
library(dplyr)
library(pander)
library(ggplot2)
library(ggthemes)
brca <- read.csv("https://raw.githubusercontent.com/jgscott/ECO395M/master/data/brca.csv")
pander(summary(brca))
str(brca)
# Check for missing data
sapply(brca, function(x) sim(is.na(x)))
sapply(brca, function(x) length(unique(x)))
missmap(brca, main = "Missing Values vs Observed", col = c("red", "blue"))
# Proportion of recalls vs non recalls in data set
prop.table(table(brca$recall))
# Raw number of cancer outcomes
table(brca$cancer)
prop.table(table(brca$cancer))
# Raw observation numbers and percentages associated with each radiologist
table(brca$radiologist)
prop.table(table(brca$radiologist))
# Raw proportion of radiologists and their recall percentages
prop.table(table(brca$radiologist, brca$recall))
# Radiologist66 Percentage of all Recall = 1 outcomes
.037487/.1499493
# Radiologist89 Percentage of all Recall = 1 outcomes
.03850051/.1499493
# Radiologist34 Percentage of all Recall = 1 outcomes
.01722391/.1499493
# Graph
radplot1 <- ggplot(data = brca, aes(x=recall, fill=radiologist)) +
ggtitle("Raw Recall Rates for Each Radiologist") +
geom_histogram( binwidth=.5, position="dodge")
radplot1 + theme_economist() +
theme(legend.position = "right") +
scale_fill_economist()
# Creating GLM models to see if some radiologists are more likely to recall patients than others holding all factors fixed
# Code Reference: Larisa Barreto, David Fraire, and Kylie Taylor
glmRad1 <- glm(recall~cancer, data = brca, family = binomial)
glmRad2 <- glm(recall~., data = brca, family = binomial)
glmRad3 <- glm(recall ~. + radiologist*cancer, data = brca, family = binomial)
# Data output for each GLM model
summary(glmRad1)
summary(glmRad2)
summary(glmRad3)
# Output coefficients as Odds Ratios for interpretability
exp(coef(glmRad1))
exp(coef(glmRad2))
exp(coef(glmRad3))
# Construct 95% CI's for all models
exp(cbind(OR = coef(glmRad1), confint(glmRad1)))
exp(cbind(OR = coef(glmRad2), confint(glmRad2)))
exp(cbind(OR = coef(glmRad3), confint(glmRad3)))
# Testing models under different testing methods
anova(glmRad2, test = "Cp")
anova(glmRad3, test = "Cp")
anova(glmRad2, test = "Chisq")
anova(glmRad3, test = "Chisq")
# Model cross comparisons
anova(glmRad1, glmRad2)
anova(glmRad1, glmRad3)
anova(glmRad2, glmRad3)
##################PART 2######################
# Duplicate origial dataset to create train/test data
brcaRe = brca
# Removing Radiologist from the data frame
drop <- c("radiologist")
brcaRe2 = brcaRe[,!(names(brcaRe) %in% drop)]
brcaRe2
# Converting all categorical variables to Dummy variables
dmybrca <- dummyVars("~.", data = brcaRe2, fullRank = T)
brcaRe2 <- data.frame(predict(dmybrca, newdata = brcaRe))
# Converting Recall to a categorical variable
brcaRe2$recall <- as.factor(brcaRe2$recall)
brcaRe2
# Creating train/test split
set.seed(200)
index <- createDataPartition(brcaRe2$recall, p=0.8, list = FALSE)
trainSet <- brcaRe2[index,]
testSet <- brcaRe2[-index,]
str(trainSet)
# Creating a control function to find the best predictors of recall
control <- rfeControl(functions = rfFuncs,
method = "repeatedcv",
repeats = 4,
verbose = FALSE)
outcomeName <- 'recall'
predictors<- names(trainSet)[!names(trainSet) %in% outcomeName]
Recall_Pred_Profile <- rfe(trainSet[,predictors], trainSet[,outcomeName],
rfeControl = control)
Recall_Pred_Profile
library(caret)
# Creating a control function to find the best predictors of recall
control <- rfeControl(functions = rfFuncs,
method = "repeatedcv",
repeats = 4,
verbose = FALSE)
outcomeName <- 'recall'
predictors<- names(trainSet)[!names(trainSet) %in% outcomeName]
Recall_Pred_Profile <- rfe(trainSet[,predictors], trainSet[,outcomeName],
rfeControl = control)
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
predictors<- names(trainSet)[!names(trainSet) %in% outcomeName]
Recall_Pred_Profile <- rfe(trainSet[,predictors], trainSet[,outcomeName],
rfeControl = control)
Recall_Pred_Profile
install.packages('e1071', dependencies=TRUE)
library(e1071)
predictors<- names(trainSet)[!names(trainSet) %in% outcomeName]
Recall_Pred_Profile <- rfe(trainSet[,predictors], trainSet[,outcomeName],
rfeControl = control)
